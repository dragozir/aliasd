// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AliasdClient is the client API for Aliasd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AliasdClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type aliasdClient struct {
	cc grpc.ClientConnInterface
}

func NewAliasdClient(cc grpc.ClientConnInterface) AliasdClient {
	return &aliasdClient{cc}
}

func (c *aliasdClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/Aliasd/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasdClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/Aliasd/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasdClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/Aliasd/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliasdServer is the server API for Aliasd service.
// All implementations must embed UnimplementedAliasdServer
// for forward compatibility
type AliasdServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	mustEmbedUnimplementedAliasdServer()
}

// UnimplementedAliasdServer must be embedded to have forward compatible implementations.
type UnimplementedAliasdServer struct {
}

func (UnimplementedAliasdServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAliasdServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedAliasdServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedAliasdServer) mustEmbedUnimplementedAliasdServer() {}

// UnsafeAliasdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AliasdServer will
// result in compilation errors.
type UnsafeAliasdServer interface {
	mustEmbedUnimplementedAliasdServer()
}

func RegisterAliasdServer(s grpc.ServiceRegistrar, srv AliasdServer) {
	s.RegisterService(&Aliasd_ServiceDesc, srv)
}

func _Aliasd_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasdServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aliasd/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasdServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aliasd_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasdServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aliasd/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasdServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aliasd_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasdServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aliasd/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasdServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aliasd_ServiceDesc is the grpc.ServiceDesc for Aliasd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aliasd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Aliasd",
	HandlerType: (*AliasdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Aliasd_Add_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Aliasd_Execute_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Aliasd_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/aliasd.proto",
}
